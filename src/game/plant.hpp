#pragma once
/** @file game/plant.hpp Abstract definition of a plant */

#include "graphics/buffer.hpp"
#include "graphics/ibo.hpp"
#include "graphics/texture.hpp"

class PlantModel;

/** An abstract plant species */
class PlantSpecies
{
public:

  /** Generate a PlantModel for this species
   * @return model */
  std::shared_ptr<PlantModel> generate() const;

  /** Render a PlantModel for this species
   * @param model */
  void render(std::shared_ptr<PlantModel>) const;
};

/** A plant mesh
 * Plant instances will be create from this, while this will be generated by a plant species analyzer in the pgen directory */
class PlantModel
{
private:

  /** The vertex buffer */
  std::shared_ptr<graphics::GLVertexBuffer> b_verts;
  /** The index buffer */
  std::shared_ptr<graphics::GLIndexBuffer> b_inds;

  glm::vec3* verts;
  GLuint* inds;

  /** The parent plant species */
  PlantSpecies* parent;

public:

  /** Initialize
   * @param verts vertex list
   * @param inds index list
   * @param nv number of vertices
   * @param ni number of indices
   * @param p parent pointer */
  PlantModel(glm::vec3* v, GLuint* i, const int nv, const int ni, PlantSpecies* p);

  /** Destroy */
  ~PlantModel();

  /** Render this model */
  void render();
};

/** A specific instance of a plant model */
class PlantInstance
{
private:

public:

};
