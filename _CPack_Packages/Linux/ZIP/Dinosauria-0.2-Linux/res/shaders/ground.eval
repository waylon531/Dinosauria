#version 410

uniform mat4 m_model;
uniform mat4 m_view;
uniform mat4 m_project;
uniform sampler2D tex_height;
uniform sampler2D tex_normal;

#define QUADS

#ifdef QUADS
layout (quads, fractional_odd_spacing, cw)
#else
layout (triangles, fractional_odd_spacing, ccw)
#endif
in;
				       
in vec2 cTexCoord[];
in vec3 cNormal[];
in vec3 cPosition[];
in vec4 cAbsPosition[];

out vec2 eTexCoord;
out vec3 eNormal;
out vec3 ePosition;
out vec4 ePositionSS;

#ifdef QUADS
vec2 interp2D(vec2 v0, vec2 v1, vec2 v2, vec2 v3)
{
  float u = gl_TessCoord.x;
  float v = gl_TessCoord.y;
  vec2 a0 = mix(v0,v1,u);
  vec2 a1 = mix(v2,v3,u);
  return mix(a0,a1,v);
  //return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}
vec3 interp3D(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
  float u = gl_TessCoord.x;
  float v = gl_TessCoord.y;
  vec3 a0 = mix(v0,v1,u);
  vec3 a1 = mix(v2,v3,u);
  return mix(a0,a1,v);
  //return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
vec4 interp4D(vec4 v0, vec4 v1, vec4 v2, vec4 v3)
{
  float u = gl_TessCoord.x;
  float v = gl_TessCoord.y;
  vec4 a0 = mix(v0,v1,u);
  vec4 a1 = mix(v2,v3,u);
  return mix(a0,a1,v);
  //return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
#else
vec2 interp2D(vec2 v0, vec2 v1, vec2 v2)
{
  return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}
vec3 interp3D(vec3 v0, vec3 v1, vec3 v2)
{
  return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
#endif


void main()
{
#ifdef QUADS
  eTexCoord = interp2D(cTexCoord[0], cTexCoord[1], cTexCoord[2], cTexCoord[3]);
  eNormal = interp3D(cNormal[0], cNormal[1], cNormal[2], cNormal[3]);
  ePosition = interp3D(cPosition[0], cPosition[1], cPosition[2], cPosition[3]);
#else
  eTexCoord = interp2D(cTexCoord[0], cTexCoord[1], cTexCoord[2]/*, cTexCoord[3]*/);
  //eNormal = normalize(interp3D(cNormal[0], cNormal[1], cNormal[2]/*, cNormal[3]*/));
  eNormal = texture2D(tex_normal, eTexCoord.st).r;
  ePosition = interp3D(cPosition[0], cPosition[1], cPosition[2]/*, cNormal[3]*/);
#endif
  float h = texture2D(tex_height, eTexCoord.st).r;
  ePosition.y = h;
  gl_Position = interp4D(cAbsPosition[0], cAbsPosition[1], cAbsPosition[2], cAbsPosition[3]);
  gl_Position.y = h;
  gl_Position = (m_project*m_view*m_model) * gl_Position;
  ePositionSS = gl_Position;
}
